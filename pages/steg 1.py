import streamlit as st
from utils.session_manager import get_current_session, is_step_accessible
from utils.ai_helper import get_ai_suggestion_steg1
from utils.database import update_session_step1
from utils.audio_text_input import audio_text_input

# Konfigurera sida
st.set_page_config(
    page_title="Steg 1 - Problembeskrivning",
    page_icon=None,
    layout="wide"
)

# Kontrollera √•tkomst
if not is_step_accessible(1):
    st.error("Du har inte √•tkomst till detta steg √§nnu.")
    st.stop()

current_session = get_current_session()
if not current_session:
    st.error("Inget aktivt samtal. G√• tillbaka till startsidan.")
    if st.button("‚Üê Tillbaka till start"):
        st.switch_page("main.py")
    st.stop()

# Header
st.title("Steg 1: Problembeskrivning")
st.markdown(f"Samtal: {current_session['session_name']} | Samtalsledare: {current_session['rektor_name']}")

# === NYTT: Gemensam komponent f√∂r ljud/text ===
transcript, audio_path = audio_text_input(1, current_session['id'], key_prefix="steg1")
if transcript:
    st.session_state.transcript_steg1 = transcript
    if audio_path:
        st.session_state.audio_path_steg1 = audio_path
# === SLUT NYTT ===

# Navigation
col1, col2 = st.columns([1, 4])
with col1:
    if st.button("‚Üê Tillbaka"):
        st.switch_page("main.py")

st.markdown("---")

# Visa befintlig data om den finns
if current_session['steg1_approved']:
    st.success("‚úÖ Steg 1 √§r redan slutf√∂rt!")
    
    st.subheader("Godk√§nd problembeskrivning:")
    st.write(current_session['problem_beskrivning'])
    
    if current_session['steg1_ai_response']:
        st.subheader("AI-f√∂rslag som godk√§ndes:")
        st.markdown(current_session['steg1_ai_response'])
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üìù Redigera detta steg"):
            # Till√•t redigering genom att s√§tta approved till False tempor√§rt
            st.session_state.edit_steg1 = True
            st.rerun()
    
    with col2:
        if st.button("‚û°Ô∏è G√• till Steg 2"):
            st.switch_page("pages/steg 2.py")
    
    # Om inte i redigeringsl√§ge, stoppa h√§r
    if not st.session_state.get('edit_steg1', False):
        st.stop()

# Formul√§r f√∂r problembeskrivning och uppladdning
st.subheader("Beskriv problemet eller fr√•gan")
st.markdown("""
B√∂rja med att tydligt beskriva det problem eller den fr√•ga som du vill diskutera med din personalgrupp. 
Du kan ladda upp eller klistra in samtal h√∂gst upp p√• sidan om du vill anv√§nda en transkribering.
""")

with st.form("problem_form"):
    st.markdown("---")
    # Ta bort uppladdning av ljudfil och textfil h√§r!
    # Problem beskrivning
    problem_beskrivning = st.text_area(
        "Problembeskrivning * (eller l√§mna tomt och ladda upp transkribering h√∂gst upp)",
        value=transcript if transcript else current_session.get('problem_beskrivning', ''),
        height=150,
        help="Beskriv tydligt det problem eller den fr√•ga som ska diskuteras eller ladda upp en transkribering h√∂gst upp p√• sidan",
        placeholder="Exempel: Vi beh√∂ver diskutera hur vi kan f√∂rb√§ttra elevernas digitala kompetens..."
    )
    # Personalgrupp
    personal_grupp = st.selectbox(
        "Vilken personalgrupp ska delta? *",
        options=["L√§rare", "EHT-personal", "Blandad grupp (l√§rare + EHT)", "Ledningsgrupp", "Hela personalstyrkan", "Annat"],
        index=0 if not current_session.get('personal_grupp') else 
              ["L√§rare", "EHT-personal", "Blandad grupp (l√§rare + EHT)", "Ledningsgrupp", "Hela personalstyrkan", "Annat"].index(current_session.get('personal_grupp', 'L√§rare'))
    )
    # Ytterligare kontext
    kontext = st.text_area(
        "Ytterligare kontext (valfritt)",
        value=current_session.get('kontext', ''),
        height=100,
        help="L√§gg till relevant bakgrundsinformation som kan hj√§lpa till att ge b√§ttre f√∂rslag",
        placeholder="Exempel: Detta √§r en uppf√∂ljning av tidigare diskussioner om... Vi har tidigare provat... Utmaningen √§r att..."
    )
    # Submit knapp
    submit_button = st.form_submit_button("F√• f√∂rslag", type="primary")

# Hantera formul√§rinl√§mning
if submit_button:
    pb = (problem_beskrivning or "").strip()
    # Om ljudfil √§r uppladdad, transkribera den nu
    uploaded_audio = st.session_state.get('audio_upload_steg1_form')
    if uploaded_audio:
        from utils.audio_handler import transcribe_uploaded_file, validate_audio_file
        is_valid, message = validate_audio_file(uploaded_audio)
        if is_valid:
            with st.spinner("Transkriberar ljudfil... Detta kan ta n√•gra minuter."):
                transcript, audio_path = transcribe_uploaded_file(
                    uploaded_audio, current_session['id'], 1
                )
                if transcript:
                    pb = transcript.strip()
                    st.session_state.transcript_steg1 = pb
                else:
                    st.error("Kunde inte transkribera filen. Kontrollera att det √§r en giltig ljudfil.")
                    st.stop()
        else:
            st.error(f"‚ùå {message}")
            st.stop()
    # Om problembeskrivning √§r tom, men transkribering finns, anv√§nd transkriberingen
    if not pb:
        pb = st.session_state.get('transcript_steg1', '').strip()
    if not pb:
        st.error("Du m√•ste antingen beskriva problemet eller ladda upp en transkribering innan du kan f√• AI-f√∂rslag.")
    else:
        st.session_state.current_problem = pb
        st.session_state.current_personal_grupp = personal_grupp
        st.session_state.current_kontext = kontext
        with st.spinner("AI analyserar ditt problem och skapar f√∂rslag..."):
            ai_suggestion = get_ai_suggestion_steg1(pb, personal_grupp, kontext)
            if ai_suggestion:
                st.session_state.ai_suggestion_steg1 = ai_suggestion
                st.rerun()
            else:
                st.error("Kunde inte h√§mta AI-f√∂rslag. Kontrollera din internetanslutning och API-nyckel.")

# Visa AI-f√∂rslag om de finns
if 'ai_suggestion_steg1' in st.session_state:
    st.markdown("---")
    st.subheader("F√∂rslag f√∂r presentation")
    with st.expander("Visa input som anv√§ndes"):
        st.write(f"Problem: {st.session_state.current_problem}")
        st.write(f"Personalgrupp: {st.session_state.current_personal_grupp}")
        if st.session_state.current_kontext:
            st.write(f"Kontext: {st.session_state.current_kontext}")
    st.markdown(st.session_state.ai_suggestion_steg1)
    st.markdown("---")
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        if st.button("‚úÖ Godk√§nn och forts√§tt till Steg 2", type="primary"):
            # Spara i databas
            update_session_step1(
                current_session['id'],
                st.session_state.current_problem,
                st.session_state.current_personal_grupp,
                st.session_state.current_kontext,
                st.session_state.ai_suggestion_steg1,
                approved=True
            )
            
            # Rensa session state
            for key in ['ai_suggestion_steg1', 'current_problem', 'current_personal_grupp', 'current_kontext', 'edit_steg1']:
                if key in st.session_state:
                    del st.session_state[key]
            
            st.success("Steg 1 godk√§nt! G√•r till Steg 2...")
            st.switch_page("pages/steg 2.py")
    
    with col2:
        if st.button("üîÑ Revidera f√∂rslag"):
            # Ta bort AI-f√∂rslag s√• anv√§ndaren kan √§ndra input
            del st.session_state.ai_suggestion_steg1
            st.rerun()
    
    with col3:
        if st.button("üíæ Spara utkast"):
            # Spara utan att godk√§nna
            update_session_step1(
                current_session['id'],
                st.session_state.current_problem,
                st.session_state.current_personal_grupp,
                st.session_state.current_kontext,
                st.session_state.ai_suggestion_steg1,
                approved=False
            )
            st.success("Utkast sparat!")

# Hj√§lptext
st.markdown("---")
with st.expander("Tips f√∂r en bra problembeskrivning"):
    st.markdown("""
    En bra problembeskrivning inneh√•ller:
    - Tydlig formulering av vad som ska diskuteras
    - Bakgrund till varf√∂r detta √§r viktigt nu
    - Konkreta exempel om m√∂jligt
    - √ñnskad utkomst av diskussionen
    Exempel p√• bra problembeskrivningar:
    "Vi beh√∂ver diskutera hur vi kan f√∂rb√§ttra elevernas digitala kompetens. M√•nga l√§rare k√§nner sig os√§kra p√• hur de ska integrera digitala verktyg i undervisningen p√• ett meningsfullt s√§tt. Vi vill komma fram till konkreta √•tg√§rder f√∂r kompetensutveckling."
    "Flera f√∂r√§ldrar har uttryckt oro √∂ver elevernas stress och arbetsb√∂rda. Vi beh√∂ver diskutera hur vi kan skapa en mer h√•llbar l√§rmilj√∂ utan att s√§nka v√•ra akademiska krav."
    """)

# Footer
st.markdown("---")
st.caption("Steg 1 av 4")